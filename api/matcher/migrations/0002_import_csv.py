# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-08-21 06:17
from __future__ import unicode_literals

import csv
import os
from contextlib import contextmanager

from django.db import migrations

CSV_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'csv')


def _get_model_classes(apps):
    """
    Retrieve the model classes at this migration's point in time.
    We cannot import the models directly because they may be newer versions than this migration expects.
    :param apps: 
    :return: tuple
    """
    return (
        apps.get_model('matcher', 'Device'),
        apps.get_model('matcher', 'Country'),
        apps.get_model('matcher', 'Tester'),
        apps.get_model('matcher', 'TesterDevice'),
        apps.get_model('matcher', 'TesterBugReport'),
    )


@contextmanager
def get_csv_reader(file):
    """
    Context manager that generates a CSV reader for a given CSV file with a header row.
    :param file: Name of file in CSV directory without .csv extension.
    :return: 
    """
    with open(os.path.join(CSV_DIR, file + '.csv'), newline='') as csv_file:
        reader = csv.reader(csv_file)
        # Bump the internal pointer of the iterator to skip the header row.
        next(reader)

        yield reader


def import_csv(apps, schema_editor):
    """
    Loads and parses data from CSV files and saves it. 
    :param apps: 
    :param schema_editor: 
    :return: 
    """
    Device, Country, Tester, TesterDevice, TesterBugReport = _get_model_classes(apps)

    # Countries
    with get_csv_reader('countries') as countries_reader:
        for row in countries_reader:
            Country(name=row[1], code_iso2=row[0]).save()

    # Devices
    with get_csv_reader('devices') as devices_reader:
        for row in devices_reader:
            Device(pk=row[0], name=row[1]).save()

    # Testers
    with get_csv_reader('testers') as testers_reader:
        for row in testers_reader:
            country = Country.objects.filter(code_iso2=row[3])[0]
            Tester(pk=row[0], first_name=row[1], last_name=row[2], country=country).save()

    # Tester Devices
    with get_csv_reader('tester_device') as tester_devices_reader:
        for row in tester_devices_reader:
            TesterDevice(tester_id=row[0], device_id=row[1]).save()

    # Bugs
    with get_csv_reader('bugs') as bug_reader:
        for row in bug_reader:
            TesterBugReport(pk=row[0], tester_id=row[2], device_id=row[1]).save()


def delete_imported_csv(apps, schema_editor):
    """
    Deletes all data saved from the import.
    :param apps: 
    :param schema_editor: 
    :return: 
    """
    Device, Country, Tester, TesterDevice, TesterBugReport = _get_model_classes(apps)

    Device.objects.all().delete()
    Country.objects.all().delete()
    Tester.objects.all().delete()
    TesterDevice.objects.all().delete()
    TesterBugReport.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('matcher', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(import_csv, delete_imported_csv),
    ]
